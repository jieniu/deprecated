<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[前端开发，从草根到英雄（第二部分）]]></title>
      <url>%2F2016%2F11%2F12%2Fzero-hero-2%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 这篇文章是”前端开发，从草根到英雄系列”的第二部分，在第一部分，你学到了如何使用HTML和CSS创建布局的最佳实践。在第二部分，我们会把JavaScript作为独立的语言来学习，我们将学习如何添加交互式的接口，JavaScript设计以及设计模式，最后我们会学习如何创建web应用。 和HTML、CSS一致，网上有大量的JavaScript指南，对于新手来说，很难分辨这些指南分别的用途，也不知道以怎样的顺序去学习这些指南。这篇文章的目的是给你提供一个线路图，作为你成为一个前端工程师的导航。 如果你还没有阅读第一篇，在读这篇之前，可以点击下面的链接阅读 JavaScript基础 JavaScript是一个跨平台的程序语言，它几乎可以做所有事情。在你了解了开发者如何使用JavaScript的基础之后，我们再详细的探讨这门语言。 语言在学习JavaScript是如何应用于web之前，首先了解这门语言本身。我们来读一下Mozilla开发者网络的Language basics crash course，这个指南会描述基本的语言结构，包括变量，条件和函数。在此之后，再读一读MDN的JavaScript指南的以下几个部分: 语法和类型 控制流和错误处理 循环和遍历 函数 不要过于担心记不住特定的语法，你随时可以回过头来查阅。相反，你要专注于像变量实例化、循环和函数等概念上。如果一时消化不了是正常的，可以适当的略过，学完后面内容再时不时回顾一下前面的内容。因为当你练习这些概念时，你才会对这些更加深刻。 为了打破单调的纯文字内容的学习，可以看一下Codecademy提供的JavaScript课程，它很容易上手，并且非常有趣。同样的，如果你有时间，对于每一个我上面列出的概念，读一下Eloquent JavaScript相应的章节，相信可以加深你的理解。Eloquent JavaScript是一个非常棒的在线书籍，几乎所有的有追求的JavaScript前端工程师都会阅读它。 交互 JavaScript作为一门语言，你已经对它有所了解，下一步要了解它如何应用于web，要了解JavaScript是如何与网站交互，你需要知道文档对象模型（Document Object Model） DOM是HTML文档中具体的结构，它是对应于HTML节点的、由JavaScript对象构成的树型结构，更进一步，你可以读一下CSSTricks发表的什么是DOM这篇文章。它对DOM提供了简单直接的描述 JavaScript可以修改DOM元素，这里有一个选择HTML元素并修改它的内容的例子： 12var container = document.getElementById(“container”); container.innerHTML = &apos;New Content!&apos;; 不要担心，这仅仅是一个简单的例子，你可以通过JavaScript “DOM操作”做更多的事情。想学习更多关于JavaScript如何与DOM交互的内容，你要通过以下MDN部分的指导，The Document Object Model 事件 使用DOM开发web和XML的例子 如何创建一个DOM树 DOM简介 使用选择器定位DOM 再次强调，把注意力集中到概念而不是语法上。试着回答以下问题： 什么是DOM？ 如何查询元素？ 如何添加事件监听者？ 如何合适的改变DOM节点属性？ 要获得一个通用的JavaScript DOM操作列表，可以看一下PlainJS提供的JavaScript函数和帮助，这个网站提诸如如何设置HTML元素样式和连接键盘事件监听者等例子，如果你觉得还不够想更深入，你都可以阅读Eloquent JavaScript中的DOM部分。 检查要调试JavaScript，我们使用内嵌在浏览器中的开发工具，几乎所有的浏览器中都会有检查面板，通过它你可以查看页面的源码，你可以查看JavaScript的执行，在终端上打印调试状态，还可以查看网络请求和回复。 这里是Chrome开发工具指南，如果你使用的是Firefox，你可以查看这个指南 基本练习目前为止，我们还有很多JavaScript知识要学习，上一章我们已然学了不少新知识，现在我们休息一下，然后做几个小实验，他们会帮助巩固你刚学的一些概念。 实验1进入实验1，我们打开AirBnb，同时打开浏览器页面检查，点击终端标签，在终端里你可以执行JavaScript语句。我们将要做的事是从操作一些页面中的元素而获得一些乐趣。试试看，你是否可以进行下面将要描述的所有DOM的操作。 我选择AirBnb的页面是因为它们的CSS类名非常直接，不会被一些编译器处理的模糊不清，所以你可以选择性的在任何页面做这些操作： 选择一个具有唯一类名的header标签，改变其中的文字 选择任何页面上的元素，然后删除它 选择任何一个元素，改变它的某一个CSS属性 选择一个指定的段落标签，将它下移250个像素 选择任何组件，例如一个面板，调整它的可视性 定义一个函数名doSomething: 可以弹出”Hello world”警告，然后想办法执行它 选择一个特定的段落标签，让它监听一个click事件，一旦该事件触发，则运行doSomething 如果你卡住了，可以在JavaScript Functions and Helpers中查找相关知识，这些任务基本上都是基于这个指南的，下面是第一个问题的的例子： 12var header = document.querySelector(‘.text-branding’)header.innerText = ‘Boop&apos; 这个实验的主要目的是练习你所学的JavaScript和DOM之间的操作，并观察他们的行为。 实验2 使用CodePen写几个包含逻辑的JavaScript函数，以及操作DOM元素。这个实验的核心内容是将你从草根到英雄第一部分学到的知识和JavaScript结合，下面的几个例子可能会给你带来灵感： 周期表格 心情颜色产生器 计算器 JavaScript智力问答 小行星画布游戏 更多JavaScript目前你已经了解了一些JavaScript知识，并且为此做了一些练习，让我们继续学习一些高级的概念吧。下面的概念不一定互相有联系，我将它们列在这里是因为它们可以帮助你理解如何构建更复杂的前端系统。你将在后续的实验和框架章节理解如何使用这些概念。 语言一旦你用JavaScript工作，你将遇到很多高级概念，我将这些概念列出来，当你有时间时可以进行阅读。同样的，Eloquent JavaScript覆盖了大部分概念，也可以用来补充你的知识。 强化原型 作用域 闭包 事件循环 事件通知 请求、调用和绑定 回调和承诺 变量及函数挂起 Currying Imperative vs. DeclarativeJavaScript和DOM如何交互，有两种方法：imperative和declarative，一方面，declarative程序专注于what，另一方面，imperative程序专注于how 123456789var hero = document.querySelector(&apos;.hero&apos;)hero.addEventListener(‘click’, function() &#123; var newChild = document.createElement(‘p’) newChild.appendChild(document.createTextNode(‘Hello world!’)) newChild.setAttribute(‘class’, ‘text’) newChild.setAttribute(‘data-info’, ‘header’) hero.appendChild(newChild) &#125;)&#125; 上面是一个imperative程序的列子，我们手动查询出一个元素，并且将UI状态存储在里面，换句话说，该程序核心在于如何(how)完成某件事情。这段程序的最大问题是它不够稳定：如果某个人修改了这段代码中的类名，例如将hero修改为villain，该监听事件将不会被触发，因为DOM中不在有hero类了。 Declarative程序解决了这个问题，你可以把选择元素的操作留给框架或库去完成。这种做法让你专注于做什么(what)而不是如何这样做(how)。想要了解更多，读一下JavaScript的状态——从Imperative到Declarative和3D Web 开发 #1: Declarative vs. Imperative 这篇指南首先告诉你imperative方法，然后才是Angular和React库的declarative方法，我建议按照这样的顺序学习，可以让你更清楚的了解到declarative解决了什么问题。 Ajax通过以上的文章和指南，你应该注意到了Ajax，Ajax是一项可以使用JavaScript和服务器交互的技术。 例如，当你在网页上提交一个表单，这个动作会将你的输入作为一个HTTP请求发送给服务器。当你在Twitter上发送一条微博，你的Twitter客户端发送了一条HTTP请求给Twitter的API服务器，并且使用服务器返回的数据更新页面。 你可以看下什么是Ajax获得更多Ajax的知识。如果你仍然不能完全理解AJAX的概念，看一下Explain it like i’m 5, what is Ajax，如果觉得还不够多，你可以读一读Eloquent JavaScript的HTTP章节。 今天为止，新的浏览器请求标准是Fetch，想要了解更多的Fetch的内容，可以读一下Dan Walsh的这篇文章，里面介绍了Fetch是如何工作的，以及如何使用它。你还可以在这篇文章中补充Fetch polyfill知识。 jQuery目前为止，你已经使用JavaScript对DOM做了很多操作了。事实是，已经有很多DOM操作的库，他们提供API来简化你的代码。 最流行的DOM操作库是jQuery，记住，jQuery是一个imperative库，它是在前端系统还没有今天这么复杂的时候开发的。今天，为了管理复杂的UI，我们会使用declarative框架和库，例如Angular和React。然而，我仍然建议你学习jQuery，因为作为一名前端工程师，你一定会在工作中遇到它的。 学习jQuery基础，可以看下jQuery学习中心，它会一步步的告诉你animations和事件处理这些重要的概念。如果你还想学习更多入门知识，你可以看下Codecademy的jQuery课程 记住，jQuery不是唯一的imperative DOM操作解决方案，PlainJS和You Might Not Need jQuery是两个很好的资源，他们会告诉你和jQuery一样的频繁使用的JavaScript函数。 ES5 vs. ES6另一个重要的概念是ECMAScript以及它和Javascript的关系。目前你将会碰到两个主要的标准：ES5和ES6。ES5和ES6是JavaScript使用的ECMAScript标准，你可以把他们作为JavaScript的版本来理解，最终的ES5草案拟于2009年，也是我们目前一直在使用的。 ES6，也叫ES2015，它是最新的标准，带来了一些新的诸如常量，类，和模板这样的语言特性。ES6带来了新的语言功能，但仍然在ES5的基础上定义语义。例如，ES6中的类仅仅是JavaScript原型继承的语法修饰。 有必要知道你今天看到的应用，要么使用ES5，要么使用ES6。ES5，ES6，ES2016，ES.Next: JavaScript版本到底怎么了和Dan Wahlins的ES6入门——下一代JavaScript是很好的ES6介绍。接着你可以在ES6功能列表查看ES5到ES6的变化。如果你还想了解更多，去Github代码库获得更多ES6功能信息。 更多练习恭喜你能够到达这里，目前你已经学了很多关于JavaScript的知识，下面我们做一些练习。 实验3 实验3集中于练习如何应用DOM操作和jQuery技能。在这个试验中，我们将学会一些结构化的方法，实验3会要求你克隆Flipboard的主页，Codecademy上有这个教程，你只需要一步步照做即可：用JavaScript与Flipboard的主页进行交互指南 在学这篇指南的时候，请把注意力集中在理解如何与网站交互上，当实现了交互之后，就知道如何应用jQuery了。 实验4 实验4用介绍性的JavaScript课程将你所学的HTML和CSS结合起来。在这个试验中，你将创建一个你自己设计的时钟，并使用JavaScript让它具有交互性。开始之前，我建议你读一下HTML，CSS和JavaScript解耦这篇文章，你将从中学到当JavaScript引进时，CSS的基本类命名规范。下面，我依然从CodePen中挑选了一个列表，作为这个实验的参考。例如，你可以在CodePen中搜索一个时钟 扁平时钟 jQuery墙钟 漂亮的时钟 复古的时钟 JavaScript简单时钟 你可以使用两种方法来做这个实验，第一个是先创建和设计HTML、CSS布局，然后再增加JavaScript交互。第二个方法是先写JavaScript逻辑，然后把布局加进去。毫无疑问你可以使用jQuery，也可以自由使用原生的JavaScript。 JavaScript框架当你掌握了JavaScript基础之后，后续你需要了解一下JavaScript框架，框架是可以帮助你结构化和组织代码的JavaScript库，JavaScript框架是可复用的，并能提供解决复杂前端问题的方案，就像状态机，路由机制以及性能优化。他们被普遍用来创建web应用 我没有挨个的描述每个JavaScript框架，然而，这里有一些框架的链接：Angular，React + Flux，Ember，Aurelia，Vue，和Meteor。你不需要学习所有的框架，选一个学习即可，不要追赶框架的潮流，取而代之的是，你需要理解框架程序底下的原则和哲学。 架构模型在学习框架之前，了解一些框架经常用到的架构模型非常重要：model-view-controller，model-view-viewmodel，和model-view-presenter。这些模型被设计用来在应用程序的不同层次创建清晰而分离的特性. 分离的特性是一种建议将应用程序划分为不同的层次的设计原则。例如，与其让HTML保留应用状态，还不如用一个JavaScript对象——通常被称为Model——来存储状态。 要了解更多模型，首先阅读Chrome Developers中的MVC，然后，读一下理解MVC和MVP(献给JavaScript和主干开发者)，在这篇文章中，不用学习’主干’，仅仅了解MVC和MVP即可 对于MVVM，Addy Osman也写了篇文章：理解MVVM——给JavaScript开发者的指南， Martin Fowler的散文GUI 架构你也应该读读，它既讲了原生的MVC，又描述了MVVM是怎么来的。最终，读下这篇JavaScript MV* 模型，还有一本完美的免费在线书籍Learning JavaScript Design Patterns你也可以看下。 设计模式JavaScript 框架没有重复发明轮子，很多框架都依赖于设计模式，在软件开发过程中，你可以把设计模式想象成解决通用问题的模板。 然而学习设计模式不是理解JavaScript的必要条件，我建议你了解以下几个设计模式 装饰者模式 工厂模式 单件模式 Revealing module 外观模式 观察者模式 理解并实现一些设计模式不仅仅让你成为一个更好的工程师，还帮助你理解一些框架的具体实现。 AngularJSAngularJS是一个JavaScript MVC框架，有时也是一个MVVM框架，它由google维护，并在2010年初次发布时给JavaScript社区带来了一场风暴 Angular是一个declarative框架，对我帮助最大、帮我理解JavaScript编程是如何从imperative转换到declarativ思想的文章是来自StackOverflow的这篇文章：AngularJS和jQuery有哪些不同 想更多的了解Angular，可以查看Angular文档，里面还有一个Angular Cat项目，可以帮你马上进入编码状态。更完整的学习AngularJs指南可以在Tim Jacobi的Github仓库中查找。最后，你还可以看一下John Papa写的这篇权威的best practice styleguide React + FluxAngular很好解决了程序员在构建复杂系统时所面对的问题，另一个流行的工具是React，它是一个创建用户接口的库，你可以把它想象成MVC中的V。由于React只是一个库，所以它会经常伴随着一个框架Flux Facebook设计React和Flux的目的是为了解决MVC本身的不足和其扩展问题。先看一下他们总所周知的介绍：Hacker Way: Rethinking Web App Development at Facebook，它重温了Flux的历史。 搭梯子才能看的视频 React和Flux的学习，先从React开始，React文档是一个很好的入门教材。然后，这篇React.js Introduction For People Who Know Just Enough jQuery To Get By会帮助你扭转jQuery思维模式。 一旦你拥有了React基础，便可可以开始学习Flux，同样的，官方文档是一个很好的开端，继而，你可以看下极好的React，这篇文章可以带领你进入更深入的学习。 练习使用框架你现在拥有JavaScript框架和架构的基础知识，于是又到了练习的时候了。在后续两个实验中，专注于应用你学过的框架的概念。特别需要注意的是，你要让你的代码保持DRY原则，头脑中能清晰的理解不同的概念，并能够让你的模块仅完成单一的功能 实验5实验5的课题是将一个用JavaScript实现的TodoMVC的app掰开，然后再用将其重写。换句话说，这是一个没有任何框架的实验，但用到了MVC的原理，目的就是让你更深入的理解MVC是如何工作的。 首先你看一下TodoMVC长什么样子，然后你要做的是先创建一个新的本地工程，建立MVC的三个组件。你还需要拉取Github仓库上的代码，因为这是一个比较复杂的实验，如果你仍然无法完成克隆这个项目，抑或没有时间，没有关系，直接使用你下载的Github代码，不断调试MVC的不同组件，直到你理解了组件之间是如何运作的。 实验6实验6是一个应用MVC的很好练习，理解MVC是进入JavaScript框架的必经之路，实验6会让你跟着Scotch.io制作的指南，使用Angular建立一个Etsy页面的克隆版。 Build an Etsy Clone with Angular and Stamplay教你使用Angular创建一个web应用、API接口，以及如何组织大型的项目。完成了这个指南，试着回答以下几个问题： 什么是web应用？ Angulars是如何应用MVC/MVVM模型的？ 什么是API？它是用来做什么的？ 你如何组织大型的代码的？ 把UI打散到不同的组件的好处是什么？ 如果你想亲手创建更多的Angular web应用，试一下Build a Real-Time Status Update App with AngularJS &amp; Firebase。 实验7 现在你已经适应了MVC，轮到Flux上场了，实验7正是让你使用React和Flux框架创建一个todo列表。全过程在这里：Facebook的Flux文档，它会一步步教你如何使用React创建接口，以及Flux如何建立web应用。 一旦你全部完成，你可以进入更复杂的教程：如何使用React，Redux和Immutable.js创建一个Todo应用，并使用Flux和React建立一个微博应用 保持更新和其他前端开发一样，JavaScript的技术发展的很快，时刻保持更新这件事变得非常重要。 给出以下列表的网站，博客以及论坛，它们既有意思，又很有价值： Smashing Magazine JavaScript Weekly Ng Weekly Reddit JavaScript JavaScript Jabber 从例子中学习最佳的学习方式是从例子中学习 风格指南JavaScript风格指南是一组代码规范，它会帮助你设计具有可读性和可维护性高的代码。 AirBnB的编码规范 常用的JavaScript原则 Node编码规范 MDN编码规范 编码基础我已经无法形容读好代码给我带来的帮助到底有多大，一旦当你想读新的好代码时，可以上Github上找 Lodash Underscore Babel Ghost NodeBB KeystoneJS 圆满文章的结束，你应该稳固的掌握了JavaScript的基础，并且知道如何应用于Web开发。记住，这篇文章只是你的一个线路图，如果你想成为一个前端英雄，你还需要在项目中花更多的时间来适应这些概念，项目做得越多，你对他们也会越热情，你学到的也越多。 这篇文章是两部系列的第二部分，唯一遗漏的地方是Node，他是一个可以允许JavaScript运行在服务器上的框架，将来，也许我会在写一篇文章介绍Node相关的服务端开发，以及NoSql数据库 欢迎来Tweet上找我 作者：@Jonathan Z. White译者：jieniu原文：From Zero to Front-end Hero (Part 2)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端开发，从草根到英雄（第一部分）]]></title>
      <url>%2F2016%2F11%2F11%2Fzero-hero%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 我还记得当我刚开始学习前端开发时，我被大量的技术文章淹没，当时让我非常困惑的是：我究竟需要学多少知识才算足够，我甚至不知道从哪里开始。 这篇指南会告诉你学习前端开发的方向，它会提供一些过去我在学习中遇到的非常有效的学习资源，并伴随着我的一些注解。 为了让这篇指南更容易消化，我将它分成了两部分，第一部分主要讲HTML和CSS的开发接口，第二部分主要讲Javascript，框架，以及设计模式，如果你对HTML和CSS很熟悉，你可以直接跳到第二部分，那里全都是Javascript。 HTML和CSS基础在前端开发中，所有事物都以HTML和CSS开始，HTML和CSS控制了你在网页上看到的内容，HTML负责网页内容，而CSS负责样式和布局。 开始前，读一读Mozilla开发网（MDN）上的HTML和CSS入门，MDN将会讲解HTML和CSS中重要的概念，另外，每章节仅仅只有一张纸那么长，另外它还提供交互页面的链接（CodePen和JSFiddle）帮助你学习。 完成这些入门教程后，可以学下CodeAcademy的课程Make a Website。完成这篇教程只需要几个小时，它是使用HTML和CSS构建网站很好的入门教程，如果你停不下来，CodeAcademy还提供了另一个入门教程Building web forms，可以帮助你创建一个带有样式的表单。 如果想要做一些CSS的练习，试试CSS Diner，它是一个有趣的CSS挑战游戏，另外一个重要的HTML和CSS概念是布局，LearnLayout是一个教你如何使用HTML和CSS创建布局的交互式教程。 同样的，要学会利用Google字体API使用Google字体的CSS技巧，Typography是一个排版组织（block of interfaces），如果你有时间，我强烈建议你读一读这本免费的在线书籍Professional Web Typography，作者是Donny Truong，你将学到作为前端工程师所需要了解的所有排版知识。 通过这些资源后，不要担心自己记不住，而是将你的注意力集中在HTML和CSS在一起是如何工作的。 HTML和CSS基础练习目前你对HTML和CSS有了基本的认识，接下来我们玩点更有趣的。这一章节里，会有两个实验，它们会教你如何创建网站和接口。我用“实验”这个词的目的是：在实验中，你从失败中学到的东西将会和你从成功中学到的一样多 实验1第一个试验中，我们将学习使用CodePen。CodePen是一个前端编辑网站，在那里，你无需本地保存文件，就可以写HTML和CSS代码。当你保存代码的同时，你便可以进行在线预览。 CodePen是一个一石二鸟的工具，一方面，他可以帮助你练习HTML和CSS编程，另一方面，你创建了一个可以跟踪你进步的文件夹。我们还将使用Dribbble，这个网站充满了设计灵感。 进入Dribbble网站，选择一些在几个小时就可以完成的设计，我替你选了几个帮助你开始：1，2，3，4和5，首先从移动页面设计开始，因为我觉得它们比pc端页面简单，当然，也不用担心pc端页面设计会很难。 当你开始动手时，尝试在CodePen中写代码，如果你卡住了，记住StackOverflow是你的朋友，另一种非常有价值的练习则是登录像Medium，AirBnB或Dropbox这样的网站，使用Chome中的检查工具查看这些页面是如何实现不同的布局和样式的。然后，仔细研究CodePen中的部分画笔，同样，我也挑选了几个不错的链接： Menu App Interface Twitter Widget Article News Card Simple Flat Menu 如果你的“复制品”看起来和“参照物”不太一样，你也不必灰心，继续做不同的设计练习，你会发现每次你都会进步。 如果你没有任何设计背景，说明你的设计之眼没有被开发出来，一个拥有设计之眼的前端开发工程师能够很容易分辨好的设计并有能力将其完美复制出来。前不久我写了一篇关于如何开发设计之眼的文章。 实验2希望第一个实验能给你带来一些HTML和CSS的信心。在第2个实验中，我们将看一些网站，然后试图实现它们的组件。 一些网站会使用CSS框架，或重命名它们的CSS类名，这样的代码读起来非常困难，所以我挑选了一些源代码很好读的网站，这些网站拥有良好的设计。 Dropbox for Business: 试着复制hero段落 AirBnB: 试着复制页脚段落 PayPal: 试着复制导航条 Invision: 试着复制页面底部的登录部分 Stripe: 试着复制支付部分 同样的，第2个实验的重点也不是重建整个页面。选择一些像导航条或hero段落这样的关键组件去编码，对于做什么组件，我已经在网站列表右边给出了建议。 你可以在CodePen中做这些实验或者在本地操作，如果你选择将其存放在本地，你可以选择把这个例子工程作为模板下载下来，或者手动抓取这些文件。我建议你使用Atom或Sublime编辑器 同时，请记住在任何页面，你都可以看见它的HTML和CSS代码，仅仅只需要右键页面或页面中的一个组件，点击检查，一个HTML在左、CSS在右的面板便会弹出，一旦你完成了或卡住了，也可以使用检查器对你的HTML和CSS进行对照。 HTML、CSS最佳练习到目前为止，我们学到了基本的HTML和CSS，下面我们将要进入最佳练习，最佳练习指的是一些列帮助你提升代码质量的非常规规则。 语义标记如何写语义标签是HTML和CSS的最佳实践之一，好的语义意味着使用合适的HTML标签以及有意义的CSS类名，它们可以传达结构的含义。 例如，h1标签标记的文字代表它们是很重要的标题，再如footer标签，同样告诉我们这部分元素属于页面的底部。更进一步，建议你读一下A Look Into Proper HTML5 Semantics以及关于CSS技巧的文章：What Makes For a Semantic Class Name CSS命名约定另一个重要的最佳实践则是CSS命名约定，像语义标签一样，好的命名约定，会传达出有意义的内容、使我们的代码具有可预见性、可读以及可维护。你可以读一读这篇文章，讲的是不同的命名约定: OOCSS, ACSS, BEM, SMACSS: What are they? What should I use? 我还建议你尝试使用简单的命名约定以培养你对它们的直觉感受，因为随着时间推移，你将探索出那些最适合你的工作方式。想知道Medium这类公司是如何利用BEM这一的命名约定的，可以读下Medium’s CSS is actually pretty f*ing good。在那篇文章中，你将了解到创建一组高效的CSS语法是一个逐步迭代的过程。 CSS重置从边缘到边框，浏览器具有较小的样式不一致性。因此，请务必重置CSS。MeyerWeb是一个流行的重置工具。 如果你想更深入，你可以阅读Create Your Own Simple Reset.css File 跨浏览器支持跨浏览器支持意味着您的代码需要支持最新的浏览器。 某些CSS属性（如转换）需要供应商前缀才能在不同的浏览器中正常工作。 您可以在这篇本章中了解有关供应商前缀的更多信息，CSS供应商前缀。 主要的代价是，您需要在多个浏览器（包括Chrome，Firefox和Safari）上测试您的网站。 CSS预处理器和后处理器自从90年代引入CSS以来，CSS已经走了很长的路。 由于UI系统变得越来越复杂，人们想出了被称为预处理器和后处理器的工具来管理复杂性。 CSS预处理器是CSS语言扩展，增加了诸如变量，多态和继承的特性（bells和whistles）。 两个主要的CSS预处理器是Sass和Less。 在2016年，Sass开始被更广泛地使用。 Bootstrap，流行的响应式CSS框架，也从Less切换到Sass。 此外，当大多数人谈论Sass时，他们实际上在谈论SCSS。 CSS后处理器支持在CSS被预处理器手写或编译后仍可更改。 例如，一些后处理器（如PostCSS）具有自动添加浏览器供应商前缀的插件。 当你第一次发现CSS预处理器和后处理器，它是会引诱你无处不在的使用它们。 但是，建议你从简单开始，只有在必要时才添加扩展，例如变量和多态。 我之前提到的文章——Medium’s CSS is actually pretty f*ing good——涵盖了在涉及到预处理器时，使用多少才是合适的相关内容。 网格系统和响应式网格系统帮助把CSS结构竖直的和水平的排列起来。 像Bootstrap，Skeleton和Foundation这样的网格框架提供了用于管理布局中的行和列的样式表。 虽然网格框架很有用，但了解网格如何工作也很重要。 了解CSS网格系统和不要对网络想多了是重要的概述。 网格系统的主要目的之一是为您的网站增加响应能力。 响应性意味着您的网站可以基于窗口宽度调整大小。多次响应是由CSS媒体查询实现的，CSS规则仅仅适应于特定的屏幕宽度。 您可以在媒体查询简介中了解有关媒体查询的详情。 另外，因为我们已经进入了移动互联网时代，请查看Mobile-First Media Queries简介。 练习HTML和CSS最佳实践现在你已经武装了最佳实践的武器，我们可以用它来做一些”军式演习”，下两个实验的目标是练习写干净整洁的代码，以及长期观察最佳实践对可维护性和可读性的影响。 实验3第三个实验是，挑选一个之前的实验，并使用学到的最佳实践方法来重构它，重构的意思是编辑你的代码，让它变得更容易读和减少它的复杂性。 最为一个前端开发者，能够有效的重构代码是一项重要的能力。写出高质量代码是一个不断迭代的过程。这篇CSS架构：重构你的CSS很好的讲述了如何开始重构你的代码。 当你在重构代码时，你需要问自己几个问题： 你的类名是否模糊不清？在六个月后吗，你还会记得这些类名的意思吗？ 你的HTML和CSS具有语义吗？当你在此审视你的代码时，你还能快速辨别结构和关系的意义吗？ 你还在一遍遍的使用十六进制颜色编码吗？难道使用Sass变量重构它们不会更能表达它们的意思吗？ 你的代码在Safari上是否和在Chrome上一样好呢？ 你可以把你的布局代码换成想Skeleton这样的网格系统吗？ 你经常用!important标签吗？你如何解决这个问题？ 实验4最后一个实验将告诉你如何使用你学到的最佳实践。 然而，最佳实践的效果往往不明显，直到您将它们应用到一个更大的项目。 对于最后一个实验，建立自己的文件夹网站。 作为前端，您的文件夹网站是您最重要的数字资产之一。文件夹是展示您的工作的网站。 更重要的是，这是一个持续的记录，可以帮助你跟踪你的进步和发展。所以即使你只有1或2件事可以展示，你也应该把它们放上去。 在开始之前，先学习一下Adham Dannaway的文章，我的（简单）工作流：设计开发一个文件夹网站。 如果你的文件夹刚开始并不完美，也没关系，随着时间推移，文件夹会迭代，最重要的是，你将使用你自己的技能来创造它。 保持更新虽然HTML和CSS不会马上过时，但保持最新的技术视野是一件很重要的事情。 下面的网站，博客以及论坛列表很有意思，也很有价值： CSSTricks Smashing Magazine Designer News Nettuts+ CSS Wizard 从例子中学习最后，最好的学习方式是从例子中学习， 这里有一套styleguides和代码约定，将教你如何成为一个更有效的前端。 Styleguides Web Styleguides是可以在网站上重复使用的CSS组件和模式的集合。从这些Styleguides中要注意的关键是，基于HTML和CSS组件的复用, 如何让你保持DRY原则。 Mapbox LonelyPlanet SalesForce MailChimp 代码约定代码约定被设计用来提高代码的可读性和可维护性。很多像CSS指南这样的页面是为了帮助你写出更好的HTML和CSS代码。另一些像Github内部CSS工具和指南这样的页面提供了高质量代码的示例 CSS指南 Github内部CSS工具和指南 AirBnb的CSS指南 圆满希望在本文结束时，你已经非常熟悉HTML和CSS了，并有一些项目在折腾了。 学习前端的最好方法是建立项目和实验。 记住，每个前端开发人员都必须从某处开始。 从今天开始比明天更好。 本文是两部分系列的第一部分。第二篇文章介绍了使用Javascript和JavaScript库/框架添加交互性。此外，如果你想要我详细说明任何事情或有任何问题，随时留言或Tweet给我。 原文：zero to front-end hero作者：Jonathan Z. White 翻译：jieniu]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何在iterm2中设置自动远程登录（附跳板机攻略）]]></title>
      <url>%2F2016%2F11%2F07%2Fitem2-autologin%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 这篇文章是自己在3年前写的，发现还没有过时，便再次发表在自己的网站上 最近在mac中折腾ssh自动登录的问题，不自动登录每次输入命令太痛苦了，采取的方案是expect脚本的方式，其实选择这种方案而不是在远程服务器上保存key的方式主要是因为公司限制了在跳板机上保存私有数据的权限，如果想了解如何不输入密码登录远程机器的原理，请看这篇博客 当然，OS X上的终端可以使用iterm2，这样配置后便利性不比$99的secureCRT差 一般情况首先介绍下不通过跳板机进行登录的方式，准备： 写一个expect脚本 1234567891011#!/usr/bin/expect set timeout 30 spawn ssh [lindex $argv 0]@[lindex $argv 1] expect &#123; &quot;(yes/no)?&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125; &quot;password:&quot; &#123;send &quot;[lindex $argv 2]\n&quot;&#125; &#125; interact 该脚本比较简单，需要三个参数，第一个参数是远程用户名，第二个参数是远程地址，第三个参数是密码 将expect脚本copy到$PATH下（例如/usr/local/bin） 在iterm2中设置登录命令为1中的脚本，用command+o的方式呼出profiles，点击Edit Profiles，按照下图的方式配好后，双击可以图1中的列表即可自动登录 有跳板机情况俺(前)公司的跳板机策略如下，不同公司的环境不一样，也许某些同学可以进行参考 跳板机上不能存放任何文件，/tmp下可以方临时文件，每天会定时清掉 copy文件方向只能是local-&gt;跳板机-&gt;remote的方向，即local可以push/pull跳板机上的文件，跳板机可以push/pull远程上的文件 向跳板机登录前需要通过邮件/短信的方式获取passcode，这是除密码之外的额外的验证方式 其实跳板机的自动远程登录与非跳板机的差异在expect脚本的编写上，其他的照搬即可，直接把代码贴出来吧 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/expect# 参数1：远程host；参数2：远程password if &#123; $argc != 2 &#125; &#123; send_user &quot;Usage: host password\n&quot; exit&#125;set host [lindex $argv 0]set pw [lindex $argv 1]set TERMSERV yourjumpserver # 跳板机服务器set USER jumpserveruser # 用户名set PASSWORD jumperserverpasswd # 跳板机密码set fd [open /place/to/passcode r] # 本地存放passcode的地方gets $fd pcclose $fd# Start the sessioncatch &#123;spawn ssh -l $USER $TERMSERV&#125; # 登录跳板机# Loginexpect &quot;*assword:*&quot; &#123; send &quot;$PASSWORD\r&quot; &#125;expect &quot;*passcode:*&quot; &#123; send &quot;$pc\r&quot; &#125; #通过跳板机登录线上机器expect &quot;*hostname*&quot; &#123; send &quot;ssh -l $USER $host\r&quot; &#125; # hostname为你跳板机的名字expect &#123; &quot;(yes/no)?&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125; &quot;*assword:*&quot; &#123;send &quot;$pw\n&quot;&#125;&#125;expect &quot;*$host*&quot; &#123; send &quot;cd ~\r&quot;; interact &#125; 因为目前公司的生产环境和之前的又不一样，这个代码属于旧代码了，所以如果有朋友在使用过程中发现问题，请帮忙纠正，谢谢]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我终于理解了这些前端开发工具，相信你也可以]]></title>
      <url>%2F2016%2F11%2F05%2Fjs-tools%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 即便像我这样非常有经验的开发者，对于一些前端开发工具，也会产生疑惑。解决办法是在概念层面上理解它们是如何工作的，以及如何共同工作的。 这篇文章是我个人对于前端开发工具的理解，抛开代码层面，我们从理念层面来谈它们是如何完成它们的工作的。 不要对新技术产生恐惧目前已经有太多的前端开发工具：Node, NPM, Grunt, Gulp, Bower, Webpack, Browserify, Yeoman, Brunch……很容易让人产生跟不上节奏的感觉。 关键点就是不要害怕，所有这些工具都是为了让你更高效而设计的。 要理解它们是什么，为什么用它们，怎么用它们，我们只需要理解以下几个概念。 概念#1——开发工具的核心作用“安装 vs.执行”开发工具做两件事： 安装 执行 当你碰到一个新的工具，第一个问题应该是：“这个工具想要帮我安装还是执行？”npm，Bower和Yeoman都属于“安装”工具，他们能把安装这件事做的很漂亮。他们可以安装前端库，例如Angular.js或React.js。它们可以在服务器上安装开发环境，它们可以安装测试库。他们甚至可以帮你安装其他的前端开发工具。 “什么是bower？” ”一个包管理器，用npm安装它。” “什么是npm？” “一个包管理器，你可以用brew安装它。” “什么是brew？”… ——@ddprrt 简短的说，它们可以安装你可以想象的和代码相关的东西。 Grunt，Webpack，Require.js，Brunch和Gulp都是“执行”工具，它们比安装工具更复杂。它们的目标是自动化web开发中的体力活和容易出错的任务。“执行”的事情往往被称作“任务”。 为了执行这些“任务”，需要使用它们各自生态系统中的包和插件。每个工具执行任务的方式有差别，它们不会做相同的事情。有些“执行”工具试图做你抛给它的所有事情，其他的专注于一件事，例如解决Javascript依赖（例如Browserify, Require.js） 有时，在同一个项目中，可能会使用好几个这样的工具。 这里有一个被“执行”工具自动化的任务列表： 在文件中替换一个文本字符串 创建文件夹，并将文件移入 一键执行单元测试 保存文件时刷新浏览器 合并所有Javascript为一个文件，所有CSS文件为一个文件 最小化我的Javascript和CSS文件 在html页面中修改&lt;script&gt;标签的位置 当你理解了工具的安装功能和执行功能，对它们进行分类也变得非常容易： 概念#2——Node和npm是所有开发工具的祖先Node和npm可以安装和执行所有这些开发工具，所以你的项目会有它们的身影。正因为这一点，大多数开发者在求助于其他工具前，都会尽可能的使用这两款工具。 Node和npm落到我们的二分归纳法中，Node是执行工具，而npm是安装工具。 npm可以安装像Angular.js或React.js之类的库。为了开发方便，它还可以安装一个服务器，从而在本地运行你的app。它甚至可以安装例如最小化你的代码的可执行工具。 另一方面，Node是“执行”工具，例如运行Javascript文件，服务器等等。 如果你刚开始学习，从Node+npm开始，建议你在这两个工具上多花一些时间。当你的项目大到一定程度，你会遇到Node和npm自动化的限制，那时你再考虑使用其他的开发工具。 概念#3——有一种构建意味着你的应用已经就绪开发者经常把Javascript文件和CSS文件分成很多个文件，这样可以让我们写出模块化的代码，并且每个文件只完成一件事。一个文件只做一件事可以减少你的认知负担（如果你认为多个文件比起一个大文件来说会让你更困惑，试图在一个5000行的源文件上工作，我想你很快会改变你的想法的🙃） 但是，当你的产品发布后，太多文件不是一个好事情，当一个用户访问你的网站，你的每一个文件都需要使用一个额外的HTTP请求，这会使你的网站加载速度变慢。 作为补救，你可以为你的应用做一次“构建”，它会将所有CSS文件合并为一个文件，对于JavaScript文件也一样。结果是，你把文件大小和文件数最小化后，用户拿到的就是优化过的文件了，要这样做，你需要用一个构建工具。 下图是一个开发中的应用代码截图，注意到它拥有5个&lt;script&gt;标签和3个&lt;link&gt;标签，如果你注意到左边，你可以看到DEVELOPMENT文件夹下有10个文件 同时下图是相同的应用，只不过被构建工具施展了“魔法”。 注意到我们是怎么只有一个&lt;script&gt;标签和一个&lt;link&gt;标签的？和之前DEVELOPMENT下有10个文件比起来，现在只有4个文件。 应用每行都是一样的，只不过我们将其压缩到一个优雅的小包里，我们称之为“build”。 既然这样做仅仅只会节省用户几十毫秒的加载页面时间，你可能会想知道这样做到底值不值。可以这样说，如果你的网站只为少数一些人提供服务，你不需要关心这件事。构建工程仅仅只适用于大流量的网站（或者那些被认为即将成为大流量的网站😎） 如果你刚刚学编程，或网站流量较小，这样做将不是太有价值。 概念#4——安装和执行的分界线比较模糊没有一个工具是只做一件事且其他工具做其他的事，他们都会拥有安装和执行功能。但是大多数情况是，一个工具更趋向于安装或更趋向于执行。 一个“安装”工具有时也会执行程序，npm经常这样做，npm也可以执行命令和脚本——不仅仅是安装文件。一种工具，就像Yeoman，在你的机器上安装预编译引用的应用，同时它也会按需动态生成新文件，这些工具模糊了安装和执行间的这条分界线。 概念#5——对于开发工具，没有唯一的组合在项目中使用哪些开发工具，完全取决于你自己。 你可以选择不使用任何工具，仅仅保证复制，粘贴、最小化、开启服务、以及其它相关操作能够高效运作即可。 或者你仅仅只是用Node和npm来完成这些工作。对于初学者来说可以满足，但是当你的工程增长到一定程度，你可能会感觉到体力劳动越来越多。 这时你或许可以选择Node及npm上游的几个工具。所以你可以把Node和npm作为你自己的核心，也许还可以加上Grunt+Bower或Webpack或Gulp+Bower。 使用Node+npm上面的几种组合中的一种或几种，可以让你的工程中的大部分任务自动化，代价是学习这些工具的学习曲线很陡峭。 概念#6——开发工具的学习曲线很陡峭，所以只需学习什么是必须的开发一个应用足够难，你可能会学习一门新语言或者一个新的框架，或者你有比较取巧的商业逻辑，而合并一个开发工具可能会把额外的一层错综复杂的事物加到你的项目中。问题就在于写开发工具相关的代码的人并不属于你的团队。 我的建议是只学习你需要在你工作中涉及到的部分，其他的不学。 最佳的学习新事物的办法是你有一个真实的任务去完成。例如，为了你的利益，不要学习Grunt怎么拷贝文件的。取而代之的是，直到你确切需要这样做的时候，再使用它来解决吧。 记住：早期就把问题复杂化将会让你变慢。 概念#7——所有的开发工具拥有共同的目标：通过将所有体力劳动自动化从而让你开心当你发挥了你的开发工具的所有潜能，我把这种状态称作“开发工具涅磬”。这是一种当你保存一个文件，或运行一个命令，于是大量的任务便会自动执行的状态。 如果你的工具仍然需要你手动移动文件，改变值，或者运行命令才能编译，那么你还没有达到“工具涅磬”的状态。 拥有开发工具的好处便是保存一个文件，可以引发你的应用的编译，并发送到浏览器从而刷新新的内容。这会显著的加速你的前端开发工作流。 所以如何衡量你该付出多少努力在配置和设置开发工具上？很简单：只到它所做的事情让你高兴为止。 概念#8——不只是你，很多人都觉得这些工具的文档很糟糕事实上，很多这些工具的文档都不足，经常让我们做一些基本的任务都变得很难。 预先定义好的文档非常之少，你会看到很多不同的操作都导致同样的错误——在StackOverflow上经常看到回答的是同一个问题。 即便文档少这件事非常厌烦，但这些工具仍然可以增强你的代码技巧，并实现了很多创造性的事情。 原文：https://medium.freecodecamp.com/making-sense-of-front-end-build-tools-3a1b3a87043b#.hpbycrwz3作者：@roneesh 翻译：jieniu]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[那些你不知道的，可以用Chrome's Developer Console完成的事]]></title>
      <url>%2F2016%2F10%2F06%2Fchrome-console%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 Chrome内嵌的开发者工具拥有很多特性，例如网页元素，网络，和安全。今天我们将全部注意力投入到它的JavaScript控制台。 我刚开始编程时，仅仅把JavaScript控制台当做服务器响应包的日志输出，或者输出变量的值。随后，在帮助文档的帮助下，我发现了控制台可以做的很多事情都是我未曾想象过的。 以下是非常有用的功能，如果你阅读这篇文章时使用的是Chrome浏览器，你甚至可以立即打开它的开发工具并尝试这些功能。 1. 选择DOM元素如果你对jQuery比较熟悉，你知道$(‘.class’)和$(‘#id’)是非常重要的，它们可以利用和DOM元素相关联的id或class对元素进行选择。 但是当你不在jQuery和DOM环境中时，你仍然可以利用开发者控制台并使用相同的功能操作DOM。 $(&#39;tagName&#39;)、$(&#39;.class&#39;)、$(&#39;#id&#39;)、$(&#39;.class #id&#39;)和document.querySelector(&#39;&#39;)等价，将返回所匹配元素列表的第一个元素。 你可以使用双美元符$$(&#39;tagName&#39;)或$$(&#39;.class&#39;)选择被匹配的所有DOM元素，这些元素将被放入一个数组中。更进一步，你可以通过指定数组中的一个下标从而选出其中特定元素。 例如，$$(&#39;.className&#39;)将返回包含类className的所有元素，$$(&#39;.className&#39;)[0]和$$(&#39;.className&#39;)[1]将分别返回其中的第一个和第二个元素。 2. 把你的浏览器变成一个编辑器是否可以在浏览器中编辑文字？这个问题你想过多少次？答案是可以。你可以把你的浏览器变成一个编辑器，你可以在任意DOM中增加或删除文字。 你不再需要在HTML文件中编辑这个元素了，相反的，打开开发者控制台，并输入以下命令： 1document.body.contentEditable=true 该命令将使页面可编辑，此时你几乎可以编辑DOM中的任何东西。 3. 查找DOM中和某个元素相关联的事件Debug时，你应该对查找DOM中和某个元素绑定的事件监听者感兴趣。开发者控制台让这件事变得简单。 getEventListeners($(&#39;selector&#39;))返回绑定在指定元素上的所有事件对象的一个数组，你可以展开该对象从而查看事件： 你可以输入以下命令，从而输出监听器上的特定事件： 1getEventListeners($(‘selector’)).eventName[0].listener 该操作将展示监听器上绑定的特定事件，这里eventName[0]是一个列有特定事件的事件数组，例如： 1getEventListeners($(‘firstName’)).click[0].listener …将展示与ID为&#39;firstName&#39;元素相关联的点击事件的监听者。 4. 监控事件当你想监控DOM中某个元素执行中的事件，你也可以在开发者控制台中完成。以下是不同的监控这些事件的命令： monitorEvents($(&#39;selector&#39;))：监控选择器指定元素所关联的所有事件，一旦事件触发，将日志记录到控制台。例如，monitorEvents($(&#39;#firstName&#39;))将记录绑定在ID为’firstName’的元素上的所有事件。 monitorEvents($(‘selector’),’eventName’)：将记录绑定在元素上的特定事件，你可以将事件名作为参数传递给该函数。例如，monitorEvents($(&#39;#firstName&#39;), &#39;click&#39;)将记录所有绑定在ID为’firstName’的元素上的点击事件。 monitorEvents($(‘selector’),[‘eventName1’,’eventName3&#39;,….])：该命令将记录多个事件，具体数量取决于你的需求。区别是需要传递一组事件字符串数组作为参数，而不是单个事件名。例如monitorEvents($(&#39;#firstName&#39;), [&#39;click&#39;, &#39;focus&#39;])将记录在ID为’firstName’元素上所绑定的点击和焦点事件。 unmonitorEvents($(‘selector’))：停止监控和记录控制台中的事件。 5. 查看某个代码块的执行时间console.time(&#39;labelName&#39;)是JavaScript console的基本函数，它接受一个标签名作为参数，并开始计时。对应的，console.timeEnd(&#39;labelName&#39;)是另一个基本函数，它同样接受标签名作为参数，并结束标签名对应的时间。 例如： 1234console.time('myTime'); //Starts the timer with label - myTimeconsole.timeEnd('mytime'); //Ends the timer with Label - myTime//Output: myTime:123.00 ms 上面代码的前两行将返回时间开始到时间结束之间的时间。 我们可以利用它来计算执行一段代码所消耗的时间。 例如，我们想知道执行一个循环所消耗的时间，可以这样做： 123456789console.time('myTime'); //Starts the timer with label - myTimefor(var i=0; i &lt; 100000; i++)&#123; 2+4+5;&#125;console.timeEnd('mytime'); //Ends the timer with Label - myTime//Output - myTime:12345.00 ms 6. 将变量的值排列到表格中假设我们有一个数组变量看起来像这样： 1var myArray=[&#123;a:1,b:2,c:3&#125;,&#123;a:1,b:2,c:3,d:4&#125;,&#123;k:11,f:22&#125;,&#123;a:1,b:2,c:3&#125;] 当我们在控制台敲入变量名，将会以数组对象的形式展示，这非常有帮助，你可以展开对象从而查看对象值。 但当属性数量增加时，是比较难理解的。因此，为了更清晰的展示变量数据，我们可以将它们放到表格中。 console.table(variableName)将变量及其属性以表格的结构展示。它们看起来像这样： 7. 检查DOM中的元素在控制台中，你可以直接检查某个元素 inspect($(&#39;selector&#39;))将监视被匹配的元素，这个元素会被列在Chrome Developer Tool是的Elements标签栏。例如inspect($(&#39;#firstName&#39;))将监视ID为’firstName’的元素；inspect($(&#39;a&#39;[3]))将监视DOM中第4个&lt;a&gt;元素 $0, $1, $2, 等等，可以帮你获取当前被监视的元素。例如$0返回最后一个被监视的元素，而$1返回倒数第二个。 8. 列出元素的属性如果你想列出元素所有的属性，你也可以直接在控制台完成。 dir($(&#39;selector&#39;))返回一个包含关联元素中所有属性的对象，你可以展开查看更多细节。 9. 重新获取上一次结果的值你可以把控制台当做一个计算器，当你这样做时，你可能需要在第二个算式中使用第一个算式的计算结果，以下是如何在内存中获取前一个计算结果的方式： 1$_ 类似这样： 12345678910111213142+3+49 //- The Answer of the SUM is 9$_9 // Gives the last Result$_ * $_81 // As the last Result was 9Math.sqrt($_)9 // As the last Result was 81$_9 // As the Last Result is 9 10. 清空控制台和内存如果你想清空控制台和它的内存，只需要输入： 1clear() 这里只是Chrome的Javascript控制台的部分例子，我希望这些小技巧可以让你的工作更高效。 原文：Things you probably didn’t know you could do with Chrome’s Developer Console作者：Swagat Kumar Swain 翻译：jieniu]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[群晖ds216j安装迅雷远程下载]]></title>
      <url>%2F2016%2F08%2F21%2Fthunder%2F</url>
      <content type="text"><![CDATA[版权申明：此文章首发于公众号程序员在深圳，搜索 studycode 即可关注本文无需授权即可转载，转载时请务必注明作者 618买了个群晖nas，本是用来存储相机中的照片，做一些多端数据同步，但发现日常使用频率并不多，于是便想方设法去提升它的使用频率，从而增加它的价值。 网上基本上都是采用docker来实现这个功能，无奈ds216j是32位的，无法安装docker，只能采用直接运行程序的方式，遂在网上找到了这个安装包，安装后，通过以下步骤，即可实现远程下载。 拷贝该安装包到nas上某个目录，例如/volume1/app目录下 解压安装包，你会得到以下文件 123456$ ls /volume1/app/etm_detmetc_monitorlog.inithunder_mounts.cfgvod_httpserver 更改以下目录的读写权限 123$ sudo chmod 777 /volume1$ sudo chmod 777 /volume1/TDDOWNLOAD$ sudo chmod 777 /volume1/ThunderDB 运行etm_monitor，启动下载程序 1$ sudo nohup ./etm_monitor &amp; 运行成功后，可以通过ps命令查看进程状态 12345$ ps -ef | grep etmroot 15392 30988 0 13:56 pts/8 00:00:00 sudo nohup ./etm_monitorroot 15393 15392 0 13:56 pts/8 00:00:00 /bin/sh +x ./etm_monitorroot 15402 1 0 13:56 pts/8 00:00:00 ./etm --system_path=. --disk_cfg=./thunder_mounts.cfg --etm_cfg=./etm.ini --log_cfg=./log.ini --pid_file=./xunlei.pid --license=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --hubble_report_pipe_path=/tmp/etm_hubble_report.pipe --ntfs_type=0 --listen_addr=0.0.0.0:9000root 15404 1 0 13:56 pts/8 00:00:00 ./vod_httpserver --etm_port=9000 剩下一步，就是打开浏览器，通过你的账号绑定迅雷下载器，这样你就可以利用浏览器对下载器创建下载任务了，在浏览器中输入host:9000/getsysinfo，host是nas的地址，通常是192.168.1.7，通过浏览器显示字符串获得激活码 1[0,1,1,0,&quot;wzjgjz&quot;,1,&quot;3.947.2.253_30&quot;,&quot;&quot;,1,&quot;0&quot;,0] 其中wzjgjz就是激活码，打开远程下载页面，登录，将激活码填入绑定则可以上是在ds216j上安装远程下载的完整过程，之后便可愉快在利用机器下片子了，最后贴一张热乎的使用图片，效果杠杠的 本文为原创内容，如需转载，请附上原始链接http://www.jianshu.com/p/1c06cdd58be6]]></content>
    </entry>

    
  
  
</search>
