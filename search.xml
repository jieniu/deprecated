<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[我终于理解了这些前端开发工具，相信你也可以]]></title>
      <url>%2F2016%2F11%2F05%2Fjs-tools%2F</url>
      <content type="text"><![CDATA[版权申明：此文章无需授权即可转载，转载时请务必注明作者 即便像我这样非常有经验的开发者，对于一些前端开发工具，也会产生疑惑。解决办法是在概念层面上理解它们是如何工作的，以及如何共同工作的。 这篇文章是我个人对于前端开发工具的理解，抛开代码层面，我们从理念层面来谈它们是如何完成它们的工作的。 不要对新技术产生恐惧目前已经有太多的前端开发工具：Node, NPM, Grunt, Gulp, Bower, Webpack, Browserify, Yeoman, Brunch……很容易让人产生跟不上节奏的感觉。 关键点就是不要害怕，所有这些工具都是为了让你更高效而设计的。 要理解它们是什么，为什么用它们，怎么用它们，我们只需要理解以下几个概念。 概念#1——开发工具的核心作用“安装 vs.执行”开发工具做两件事： 安装 执行 当你碰到一个新的工具，第一个问题应该是：“这个工具想要帮我安装还是执行？“ npm，Bower和Yeoman都属于”安装“工具，他们能把安装这件事做的很漂亮。他们可以安装前端库，例如Angular.js或React.js。它们可以在服务器上安装开发环境，它们可以安装测试库。他们甚至可以帮你安装其他的前开发工具。 “什么是bower？” ”一个包管理器，用npm安装它。” “什么是npm？” “一个包管理器，你可以用brew安装它。” “什么是brew？”… ——@ddprrt 简短的说，它们可以安装你可以想象的和代码相关的东西。 Grunt，Webpack，Require.js，Brunch和Gulp都是“执行”工具，它们比安装工具更复杂。它们的目标是自动化web开发中的体力活和容易出错的任务。执行的事情往往被称作“任务”。 为了执行这些“任务”，需要使用它们各自生态系统中的包和插件。每个工具执行任务的方式有差别，它们不会做相同的事情。有些“执行”工具试图做你抛给它的所有事情，其他的专注于一件事，例如解决Javascript依赖（例如Browserify, Require.js） 有时，在同一个项目中，可能会使用好几个这样的工具。 这里有一个被“执行”工具自动化的任务列表： 在文件中替换一个文本字符串 创建文件夹，并将文件移入 一键执行单元测试 保存文件时刷新浏览器 合并所有Javascript为一个文件，所有CSS文件为一个文件 最小化我的Javascript和CSS文件 在html页面中修改&lt;script&gt;标签的位置 当你理解了工具的安装功能和执行功能，对它们进行分类也变得非常容易： 概念#2——Node和npm是所有开发工具的祖先Node和npm可以安装和执行所有这些开发工具，所以你的项目会有迹可循。正因为这一点，大多数开发者在求助于其他工具前，都会尽可能的使用这两款工具。 Node和npm落到我们的二分归纳法中，Node是执行工具，而npm是安装工具。 npm可以安装像Angular.js或React.js之类的库。为了开发方便，它还可以安装一个服务器，从而在本地运行你的app。它甚至可以安装例如最小化你的代码的可执行工具。 另一方面，Node是”执行“工具，例如运行Javascript文件，服务器等等。 如果你刚开始学习，从Node+npm开始，你需要在这两个工具上多花一些时间。当你的项目大到一定程度，你会遇到Node和npm自动化的限制，那时你再考虑使用其他开发工具。 概念#3——有一种构建意味着你的应用已经就绪开发者经常把Javascript文件和CSS文件分成很多个文件，这样可以让我们写出模块化的代码，并且每个文件只完成一件事。一个文件只做一件事可以减少你的认知负载（如果你认为多个文件比起一个大文件来说会让你更困惑，试图在一个5000行的源文件上工作，我想你很快会改变你的想法的🙃） 但是，当你的产品发布后，太多文件不是一个好事情，当一个用户访问你的网站，你的每一个文件都需要使用一个额外的HTTP请求，这会使你的网站加载速度变慢。 作为补救，你可以为你的应用做一次“构建”，它会将所有CSS文件合并为一个文件，对于JavaScript文件也一样。结果是，你把文件大小和文件数最小化后，用户拿到的就是优化过的文件了，要这样做，你需要用一个构建工具。 下图是一个开发中的应用代码截图，注意到它拥有5个&lt;script&gt;标签和3个&lt;link&gt;标签，如果你注意到左边，你可以看到DEVELOPMENT文件夹下有10个文件 同时下图是相同的应用，只不过被构建工具施展了“魔法”。 注意到我们是怎么只有一个&lt;script&gt;标签和一个&lt;link&gt;标签的？和之前DEVELOPMENT下有10个文件比起来，现在只有4个文件。 应用每行都是一样的，只不过我们将其压缩到一个优雅的小包里，我们称之为“build”。 既然这样做仅仅只会节省用户几十毫秒的加载页面时间，你可能会想知道这样做到底值不值。可以这样说，如果你的网站只为少数一些人提供服务，你不需要关心这件事。构建工程仅仅只适用于大流量的网站（或者那些被认为即将成为大流量的网站😎） 如果你刚刚学编程，或网站流量较小，这样做将不是太有价值。 概念#4——安装和执行的分界线比较模糊没有一个工具是只做一件事且其他工具做其他的事，他们都会拥有安装和执行功能。但是大多数情况是，一个工具更趋向于安装或更趋向于执行。 一个“安装”工具有时也会执行程序，npm经常这样做，npm也可以执行命令和脚本——不仅仅是安装文件。一种工具，就像Yeoman，在你的机器上安装预编译引用的应用，同时它也会按需动态生成新文件，模糊了安装和执行间的这条分界线。 概念#5——对于开发工具，没有唯一的组合在项目中使用哪些开发工具，完全取决于你自己。 你可以选择不使用任何工具，仅仅记住复制，粘贴、最小化、开启服务、以及其它相关操作能够高效运作即可。 或者你仅仅只是用Node和npm来完成这些工作。对于初学者来说可以满足，但是当你的工程增长到一定程度，你可能会感觉到体力劳动越来越多。 这时你或许可以选择Node及npm上游的几个工具。所以你可以把Node和npm作为你自己的核心，也许还可以加上Grunt+Bower或Webpack或Gulp+Bower。 使用Node+npm上面的几种组合中的一种或几种，可以让你的工程中的大部分任务自动化，代价是学习这些工具的学习曲线很陡峭。 概念#6——开发工具的学习曲线很陡峭，所以只需学习什么是必须的开发一个应用足够难，你可能会学习一门新语言或者一个新的框架，或者你有比较取巧的商业逻辑，而合并一个开发工具可能会把额外的一层错综复杂的事物加到你的项目中。问题就在于写构建工具相关的代码的人并不属于你的团队。 我的建议是只学习你需要在你工作中涉及到的部分，其他的不学。 最佳的学习新事物的办法是你有一个真实的任务去完成。例如，为了你的利益，不要学习Grunt怎么拷贝文件的。取而代之的是，直到你确切需要这样做的时候，再使用它来解决吧。 记住：早期就把问题复杂化将会让你变慢。 概念#7——所有的构建工具拥有共同的目标：通过自动化所有体力劳动从而让你开心当你发挥了你的构建工具的所有潜能，我把这种状态称作“构建工具涅磬”。这是一种当你保存一个文件，或执行一个命令，于是大量的任务便会自动执行的状态。 如果你的工具仍然需要你手动移动文件，改变值，或者执行命令才能编译，那么你还没有达到“工具涅磬”的状态。 拥有构建工具的好处便是保存一个文件，可以引发你的应用的编译，并发送到浏览器从而刷新新的内容。这会显著的加速你的前端开发工作流。 所以如何衡量你该付出多少努力在配置和设置构建工具上？很简单：只到它所做的事情让你高兴为止。 概念#8——不只是你，很多人都觉得这些工具的文档很糟糕事实上，很多这些工具的文档都不足，经常让我们做一些基本的任务都变得很难。 预先定义好的文档非常之少，你会看到很多不同的操作都导致同样的错误——在StackOverflow上经常看到回答的是同一个问题。 即便文档少这件事非常厌烦，但这些工具仍然可以增强你的代码技巧，并实现了很多创造性的事情。 总之，你再知道我们会用这些工具了吧？ 原文：https://medium.freecodecamp.com/making-sense-of-front-end-build-tools-3a1b3a87043b#.hpbycrwz3作者：@roneesh 翻译：jieniu]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[那些你不知道的，可以用Chrome's Developer Console完成的事]]></title>
      <url>%2F2016%2F10%2F06%2Fchrome-console%2F</url>
      <content type="text"><![CDATA[版权申明：此文章无需授权即可转载，转载时请务必注明作者 Chrome内嵌的开发者工具拥有很多特性，例如网页元素，网络，和安全。今天我们将全部注意力投入到它的JavaScript控制台。 我刚开始编程时，仅仅把JavaScript控制台当做服务器响应包的日志输出，或者输出变量的值。随后，在帮助文档的帮助下，我发现了控制台可以做的很多事情都是我未曾想象过的。 以下是非常有用的功能，如果你阅读这篇文章时使用的是Chrome浏览器，你甚至可以立即打开它的开发工具并尝试这些功能。 1. 选择DOM元素如果你对jQuery比较熟悉，你知道$(‘.class’)和$(‘#id’)是非常重要的，它们可以利用和DOM元素相关联的id或class对元素进行选择。 但是当你不在jQuery和DOM环境中时，你仍然可以利用开发者控制台并使用相同的功能操作DOM。 $(&#39;tagName&#39;)、$(&#39;.class&#39;)、$(&#39;#id&#39;)、$(&#39;.class #id&#39;)和document.querySelector(&#39;&#39;)等价，将返回所匹配元素列表的第一个元素。 你可以使用双美元符$$(&#39;tagName&#39;)或$$(&#39;.class&#39;)选择被匹配的所有DOM元素，这些元素将被放入一个数组中。更进一步，你可以通过指定数组中的一个下标从而选出其中特定元素。 例如，$$(&#39;.className&#39;)将返回包含类className的所有元素，$$(&#39;.className&#39;)[0]和$$(&#39;.className&#39;)[1]将分别返回其中的第一个和第二个元素。 2. 把你的浏览器变成一个编辑器是否可以在浏览器中编辑文字？这个问题你想过多少次？答案是可以。你可以把你的浏览器变成一个编辑器，你可以在任意DOM中增加或删除文字。 你不再需要在HTML文件中编辑这个元素了，相反的，打开开发者控制台，并输入以下命令： 1document.body.contentEditable=true 该命令将使页面可编辑，此时你几乎可以编辑DOM中的任何东西。 3. 查找DOM中和某个元素相关联的事件Debug时，你应该对查找DOM中和某个元素绑定的事件监听者感兴趣。开发者控制台让这件事变得简单。 getEventListeners($(&#39;selector&#39;))返回绑定在指定元素上的所有事件对象的一个数组，你可以展开该对象从而查看事件： 你可以输入以下命令，从而输出监听器上的特定事件： 1getEventListeners($(‘selector’)).eventName[0].listener 该操作将展示监听器上绑定的特定事件，这里eventName[0]是一个列有特定事件的事件数组，例如： 1getEventListeners($(‘firstName’)).click[0].listener …将展示与ID为&#39;firstName&#39;元素相关联的点击事件的监听者。 4. 监控事件当你想监控DOM中某个元素执行中的事件，你也可以在开发者控制台中完成。以下是不同的监控这些事件的命令： monitorEvents($(&#39;selector&#39;))：监控选择器指定元素所关联的所有事件，一旦事件触发，将日志记录到控制台。例如，monitorEvents($(&#39;#firstName&#39;))将记录绑定在ID为’firstName’的元素上的所有事件。 monitorEvents($(‘selector’),’eventName’)：将记录绑定在元素上的特定事件，你可以将事件名作为参数传递给该函数。例如，monitorEvents($(&#39;#firstName&#39;), &#39;click&#39;)将记录所有绑定在ID为’firstName’的元素上的点击事件。 monitorEvents($(‘selector’),[‘eventName1’,’eventName3&#39;,….])：该命令将记录多个事件，具体数量取决于你的需求。区别是需要传递一组事件字符串数组作为参数，而不是单个事件名。例如monitorEvents($(&#39;#firstName&#39;), [&#39;click&#39;, &#39;focus&#39;])将记录在ID为’firstName’元素上所绑定的点击和焦点事件。 unmonitorEvents($(‘selector’))：停止监控和记录控制台中的事件。 5. 查看某个代码块的执行时间console.time(&#39;labelName&#39;)是JavaScript console的基本函数，它接受一个标签名作为参数，并开始计时。对应的，console.timeEnd(&#39;labelName&#39;)是另一个基本函数，它同样接受标签名作为参数，并结束标签名对应的时间。 例如： 1234console.time('myTime'); //Starts the timer with label - myTimeconsole.timeEnd('mytime'); //Ends the timer with Label - myTime//Output: myTime:123.00 ms 上面代码的前两行将返回时间开始到时间结束之间的时间。 我们可以利用它来计算执行一段代码所消耗的时间。 例如，我们想知道执行一个循环所消耗的时间，可以这样做： 123456789console.time('myTime'); //Starts the timer with label - myTimefor(var i=0; i &lt; 100000; i++)&#123; 2+4+5;&#125;console.timeEnd('mytime'); //Ends the timer with Label - myTime//Output - myTime:12345.00 ms 6. 将变量的值排列到表格中假设我们有一个数组变量看起来像这样： 1var myArray=[&#123;a:1,b:2,c:3&#125;,&#123;a:1,b:2,c:3,d:4&#125;,&#123;k:11,f:22&#125;,&#123;a:1,b:2,c:3&#125;] 当我们在控制台敲入变量名，将会以数组对象的形式展示，这非常有帮助，你可以展开对象从而查看对象值。 但当属性数量增加时，是比较难理解的。因此，为了更清晰的展示变量数据，我们可以将它们放到表格中。 console.table(variableName)将变量及其属性以表格的结构展示。它们看起来像这样： 7. 检查DOM中的元素在控制台中，你可以直接检查某个元素 inspect($(&#39;selector&#39;))将监视被匹配的元素，这个元素会被列在Chrome Developer Tool是的Elements标签栏。例如inspect($(&#39;#firstName&#39;))将监视ID为’firstName’的元素；inspect($(&#39;a&#39;[3]))将监视DOM中第4个&lt;a&gt;元素 $0, $1, $2, 等等，可以帮你获取当前被监视的元素。例如$0返回最后一个被监视的元素，而$1返回倒数第二个。 8. 列出元素的属性如果你想列出元素所有的属性，你也可以直接在控制台完成。 dir($(&#39;selector&#39;))返回一个包含关联元素中所有属性的对象，你可以展开查看更多细节。 9. 重新获取上一次结果的值你可以把控制台当做一个计算器，当你这样做时，你可能需要在第二个算式中使用第一个算式的计算结果，以下是如何在内存中获取前一个计算结果的方式： 1$_ 类似这样： 12345678910111213142+3+49 //- The Answer of the SUM is 9$_9 // Gives the last Result$_ * $_81 // As the last Result was 9Math.sqrt($_)9 // As the last Result was 81$_9 // As the Last Result is 9 10. 清空控制台和内存如果你想清空控制台和它的内存，只需要输入： 1clear() 这里只是Chrome的Javascript控制台的部分例子，我希望这些小技巧可以让你的工作更高效。 原文：Things you probably didn’t know you could do with Chrome’s Developer Console作者：Swagat Kumar Swain 翻译：jieniu]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[群晖ds216j安装迅雷远程下载]]></title>
      <url>%2F2016%2F08%2F21%2Fthunder%2F</url>
      <content type="text"><![CDATA[版权申明：此文章无需授权即可转载，转载时请务必注明作者 618买了个群晖nas，本是用来存储相机中的照片，做一些多端数据同步，但发现日常使用频率并不多，于是便想方设法去提升它的使用频率，从而增加它的价值。 网上基本上都是采用docker来实现这个功能，无奈ds216j是32位的，无法安装docker，只能采用直接运行程序的方式，遂在网上找到了这个安装包，安装后，通过以下步骤，即可实现远程下载。 拷贝该安装包到nas上某个目录，例如/volume1/app目录下 解压安装包，你会得到以下文件 123456$ ls /volume1/app/etm_detmetc_monitorlog.inithunder_mounts.cfgvod_httpserver 更改以下目录的读写权限 123$ sudo chmod 777 /volume1$ sudo chmod 777 /volume1/TDDOWNLOAD$ sudo chmod 777 /volume1/ThunderDB 运行etm_monitor，启动下载程序 1$ sudo nohup ./etm_monitor &amp; 运行成功后，可以通过ps命令查看进程状态 12345$ ps -ef | grep etmroot 15392 30988 0 13:56 pts/8 00:00:00 sudo nohup ./etm_monitorroot 15393 15392 0 13:56 pts/8 00:00:00 /bin/sh +x ./etm_monitorroot 15402 1 0 13:56 pts/8 00:00:00 ./etm --system_path=. --disk_cfg=./thunder_mounts.cfg --etm_cfg=./etm.ini --log_cfg=./log.ini --pid_file=./xunlei.pid --license=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --hubble_report_pipe_path=/tmp/etm_hubble_report.pipe --ntfs_type=0 --listen_addr=0.0.0.0:9000root 15404 1 0 13:56 pts/8 00:00:00 ./vod_httpserver --etm_port=9000 剩下一步，就是打开浏览器，通过你的账号绑定迅雷下载器，这样你就可以利用浏览器对下载器创建下载任务了，在浏览器中输入host:9000/getsysinfo，host是nas的地址，通常是192.168.1.7，通过浏览器显示字符串获得激活码 1[0,1,1,0,&quot;wzjgjz&quot;,1,&quot;3.947.2.253_30&quot;,&quot;&quot;,1,&quot;0&quot;,0] 其中wzjgjz就是激活码，打开远程下载页面，登录，将激活码填入绑定则可以上是在ds216j上安装远程下载的完整过程，之后便可愉快在利用机器下片子了，最后贴一张热乎的使用图片，效果杠杠的 本文为原创内容，如需转载，请附上原始链接http://www.jianshu.com/p/1c06cdd58be6]]></content>
    </entry>

    
  
  
</search>
